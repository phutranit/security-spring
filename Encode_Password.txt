------------> B64 Encode
#Controller 
package project.shopp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import project.shopp.utils.EncryptPassword;

@Controller
public class TestPassWord {
	@Autowired
	private EncryptPassword passwordEncoder;
	@RequestMapping(value = "create-password", method = RequestMethod.GET)
	@ResponseBody
	public String password() {
		System.out.println(passwordEncoder.encrypt("123456"));
		return null;
	}
}

#dispatcher-servlet.xml 
<bean class="project.shopp.utils.EncryptPassword"></bean>
#create class EncryptPassword (B64 encode)
package project.shopp.utils;

import java.security.MessageDigest;
import java.util.Base64;

public class EncryptPassword {

	public String encrypt(String password) {
		MessageDigest messageDigest = null;

		String hash = null;
		try {
			messageDigest = MessageDigest.getInstance("SHA");
			messageDigest.update(password.getBytes("UTF-8"));
			byte bytes[] = messageDigest.digest();
			hash = Base64.getEncoder().encodeToString(bytes);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return hash;
	}
}

#security xml 
 <authentication-manager>
        <!-- authentication from database -->
        <authentication-provider>
           	<password-encoder base64="true" hash="sha"/> 
            <jdbc-user-service data-source-ref="myDataSource"
                users-by-username-query="select username, password, active from users where username=?"
                authorities-by-username-query="select username, concat('ROLE_', name) as role from users as u inner join role as r on u.idrole = r.idrole where username= ?" />
        	</authentication-provider>
    </authentication-manager>

#note : http://www.baeldung.com/java-base64-encode-and-decode
#example : 123456->fEqNCco3Yq9h5ZUglD3CZJT4lBs=
--------------------------------------------

------------> bcrypt Encode
@Controller 
@Controller
public class TestPassWord {
	@Autowired
	private PasswordEncoder passwordEncoder;

	@RequestMapping(value = "create-password", method = RequestMethod.GET)
	@ResponseBody
	public String password() {
		System.out.println(passwordEncoder.encode("123456"));
		return null;
	}
}
#Security xml :
<beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    <beans:bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder"></beans:bean>
    <authentication-manager>
        <!-- authentication from database -->
        <authentication-provider>
           	<password-encoder ref="bcryptEncoder" /> 
            <jdbc-user-service data-source-ref="myDataSource"
                users-by-username-query="select username, password, active from users where username=?"
                authorities-by-username-query="select username, concat('ROLE_', name) as role from users as u inner join role as r on u.idrole = r.idrole where username= ?" />
        	</authentication-provider>
    </authentication-manager>
----------------------------------------------------------------


------------> md5 Encode
#create class :StringUtils 
package utils;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class StringUtils {
	
	public String md5(String str){
		MessageDigest md;
		String result = "";
		try {
			md = MessageDigest.getInstance("MD5");
			md.update(str.getBytes());
			BigInteger bi = new BigInteger(1, md.digest());
			
			result = bi.toString(16);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return result;
	}

}


